from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from keyboards.all_kb import main_kb, create_spec_kb, create_rat, gender_kb
from keyboards.inline_kbs import ease_link_kb, get_inline_kb, create_qst_inline_kb
from aiogram.filters import CommandStart, Command, CommandObject
from create_bot import questions

from utils.utils import get_random_person
from aiogram.types import CallbackQuery
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import questions, bot
from .anketa import Form
from aiogram.fsm.context import FSMContext
from db.db import get_user_data
from handlers.anketa import start_router


@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)

    if user_info:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –Ø –≤–∏–∂—É, —á—Ç–æ —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∞ –∑–Ω–∞—á–∏—Ç —Ç–µ–±–µ –º–æ–∂–Ω–æ '
                             '–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å.', reply_markup=main_kb(message.from_user.id))
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:', reply_markup=gender_kb())
        await state.set_state(Form.gender)

@start_router.message(Command('start_2'))
async def cmd_start_2(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_2 –∏—Å–ø–æ–ª—å–∑—É—è —Ñ–∏–ª—å—Ç—Ä Command()',
                         reply_markup=create_spec_kb())

@start_router.message(F.text == '/start_3')
async def cmd_start_3(message: Message):
    await message.answer('–ó–∞–ø—É—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /start_3 –∏—Å–ø–æ–ª—å–∑—É—è –º–∞–≥–∏—á–µ—Å–∫–∏–π —Ñ–∏–ª—å—Ç—Ä F.text!',
                         reply_markup=create_rat())

@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω!')
async def get_inline_btn_link_1(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏!', reply_markup=ease_link_kb())

@start_router.message(F.text == '–î–∞–≤–∞–π –∏–Ω–ª–∞–π–Ω v2!')
async def get_inline_btn_link_2(message: Message):
    await message.answer('–í–æ—Ç —Ç–µ–±–µ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ callback!', reply_markup=get_inline_kb())

@start_router.callback_query(F.data == 'get_person')
async def send_random_person(call: CallbackQuery):
    await call.answer('–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', show_alert=False)
    user = get_random_person()
    formatted_message = (
        f"üë§ <b>–ò–º—è:</b> {user['name']}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {user['address']}\n"
        f"üìß <b>Email:</b> {user['email']}\n"
        f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {user['phone_number']}\n"
        f"üéÇ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {user['birth_date']}\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {user['company']}\n"
        f"üíº <b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> {user['job']}\n"
    )
    await call.message.answer(formatted_message)

@start_router.callback_query(F.data == 'back_home')
async def send_back_home(call: CallbackQuery):
    await call.message.answer(f'Enter /start {call.from_user.id}', show_alert=False)
    await bot.send_message(chat_id=301711111, text='Hello Nelli!')

@start_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏', reply_markup=create_qst_inline_kb(questions))

@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start1(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' \
               f'–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å:'
    async with ChatActionSender(bot=bot, chat_id=call.from_user.id, action="typing"):
        await asyncio.sleep(2)
        await call.message.answer(msg_text, reply_markup=create_qst_inline_kb(questions))

@start_router.message(Command(commands=["settings", "about"]))
async def univers_cmd_handler(message: Message, command: CommandObject):
    command_args: str = command.args
    command_name = 'settings' if 'settings' in message.text else 'about'
    response = f'–ë—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /{command_name}'
    if command_args:
        response += f' —Å –º–µ—Ç–∫–æ–π <b>{command_args}</b>'
    else:
        response += ' –±–µ–∑ –º–µ—Ç–∫–∏'
    await message.answer(response)

@start_router.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        profile_message = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<b>üÜî ID:</b> {user_info['user_id']}\n"
            f"<b>üíº –õ–æ–≥–∏–Ω:</b> @{user_info['user_login']}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info['full_name']}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info['gender']}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info['age']}\n"
            f"<b>üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {user_info['date_reg']}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info['about']}\n"
        )

        await message.answer_photo(photo=user_info.get('photo'), caption=profile_message)