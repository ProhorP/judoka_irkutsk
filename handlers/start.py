from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from keyboards.all_kb import main_kb
from keyboards.inline_kbs import inline_contact_kb, get_inline_gender_kb, create_qst_inline_kb, get_inline_reg_kb
from aiogram.filters import CommandStart, Command, CommandObject
from create_bot import questions

from utils.utils import get_random_person
from aiogram.types import CallbackQuery
import asyncio
from aiogram.utils.chat_action import ChatActionSender
from create_bot import questions, bot
from .anketa import Form
from aiogram.fsm.context import FSMContext
from db.db import get_user_data
from handlers.anketa import start_router
from create_bot import admins

@start_router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)

    if user_info == None:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:', reply_markup=get_inline_reg_kb())
        await state.set_state(Form.registration)
    else:
        await message.answer('–ü—Ä–∏–≤–µ—Ç. –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ?', reply_markup=main_kb(message.from_user.id))


@start_router.message(F.text == '–°–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏')
async def cmd_start_3(message: Message):
    await message.answer('–° –Ω–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤',
                         reply_markup=inline_contact_kb())

@start_router.callback_query(F.data == 'get_phone')
async def send_phone(call: CallbackQuery):
    await call.message.answer('+7‚Äí914‚Äí873‚Äí49‚Äí31\n'
                              '+7‚Äí952‚Äí627‚Äí01‚Äí35\n'
                              '+7 (3952) 99‚Äí20‚Äí09')


@start_router.message(Command('faq'))
async def cmd_start_2(message: Message):
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏', reply_markup=create_qst_inline_kb(questions))


@start_router.callback_query(F.data.startswith('qst_'))
async def cmd_start1(call: CallbackQuery):
    await call.answer()
    qst_id = int(call.data.replace('qst_', ''))
    qst_data = questions[qst_id]
    msg_text = f'–û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å {qst_data.get("qst")}\n\n' \
               f'<b>{qst_data.get("answer")}</b>\n\n' 
    await call.message.answer(msg_text)


@start_router.message(F.text.contains('–ü—Ä–æ—Ñ–∏–ª—å'))
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        profile_message = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
            f"<b>üíº –õ–æ–≥–∏–Ω telegram:</b> @{user_info['user_login']}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info['full_name']}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info['gender']}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info['age']}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info['about']}\n"
        )

        await message.answer(profile_message)


@start_router.message(F.text == '–ó–∞–ø–∏—Å—å –Ω–∞ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É')
async def start_profile(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        user_info = await get_user_data(user_id=message.from_user.id)
        profile_message = (
            f"<b>üë§ –ó–∞—è–≤–∫–∞ –Ω–∞ –ø–µ—Ä–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:</b>\n"
            f"<b>üíº –õ–æ–≥–∏–Ω telegram:</b> @{user_info['user_login']}\n"
            f"<b>üìõ –ü–æ–ª–Ω–æ–µ –∏–º—è:</b> {user_info['full_name']}\n"
            f"<b>üßë‚Äçü¶∞ –ü–æ–ª:</b> {user_info['gender']}\n"
            f"<b>üéÇ –í–æ–∑—Ä–∞—Å—Ç:</b> {user_info['age']}\n"
            f"<b>üìù –û —Å–µ–±–µ:</b> {user_info['about']}\n"
        )

        for admin_telegram_id in admins:
            await bot.send_message(chat_id=admin_telegram_id, text=profile_message)
        await message.answer(text = '–í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', eply_markup=main_kb(message.from_user.id))